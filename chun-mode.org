#+title: Chun-mode
#+startup: overview indent
#+OPTIONS: num:nil

Some emacs configs I used without any personal information.

Babel mode is a good place to take notes.

* Utilities
** OS related
*** get OS type

#+BEGIN_SRC emacs-lisp
(defun chun/is-on-mac ()
  (string-equal system-type "darwin"))
(defun chun/is-on-linux ()
  (string-equal system-type "gnu/linux"))
(defun chun/is-on-windows ()
  (string-equal system-type "windows-nt"))
#+END_SRC

#+RESULTS:
: chun/is-on-windows


** string related
** time related
*** insert today's date

#+BEGIN_SRC emacs-lisp
 (defun chun/insert-current-date (&optional omit-day-of-week-p)
    "Insert today's date using the current locale.
  With a prefix argument, the date is inserted without the day of
  the week."
    (interactive "P*")
    (insert (calendar-date-string (calendar-current-date) nil
				  omit-day-of-week-p)))
#+END_SRC

#+RESULTS:
: chun/insert-current-date

** edit related
*** org-mode inline code with ~~

#+BEGIN_SRC emacs-lisp
(defun chun/--set-inline-code-wrapper ()
  (let* (start
         end
         (space "[?\s?\n?,]"))
    (when (re-search-forward space nil t)
      (setq end (point))
      (backward-char 1)
      (when (re-search-backward space nil t)
        (setq start (point))
        (goto-char start)
        (forward-char 1)
        (insert "~")
        (goto-char end)
        (insert "~")))))

(defun chun/wrap-inline-code ()
  (interactive)
  (chun/--set-inline-code-wrapper))
#+END_SRC

#+RESULTS:
: chun/wrap-inline-code


#+BEGIN_SRC emacs-lisp
(after! org-mode
  (add-hook 'org-mode
            (lambda () (local-set-key (kbd "C-x C-w") #'chun/wrap-inline-code))))
#+END_SRC

#+RESULTS:

** IO related
*** alias some crux helper functions
**** Remove the current file and buffer
#+BEGIN_SRC emacs-lisp
(defalias 'chun/remove-file 'crux-delete-buffer-and-file)
#+END_SRC

#+RESULTS:
: chun/remove-file

**** Find recently visited file

#+BEGIN_SRC emacs-lisp
(defalias 'chun/find-recent-file 'crux-recentf-find-file)
#+END_SRC

#+RESULTS:
: chun/find-recent-file

*** Get current file name

#+BEGIN_SRC emacs-lisp
(defun chun/get-file-name ()
  "Get the filename without directory to clipboard."
  (interactive)
  (kill-new
   (file-name-nondirectory (buffer-file-name))))
#+END_SRC

#+RESULTS:
: chun/get-file-name


* Org-mode related
** org babel

#+BEGIN_SRC emacs-lisp
(defun org-insert-src-block (src-code-type)
  "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
  (interactive (let* ((src-code-types '("emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++"
                                       "css" "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond"
                                       "mscgen" "octave" "oz" "plantuml" "R" "sass" "screen" "sql"
                                       "awk" "ditaa" "haskell" "latex" "lisp" "matlab" "ocaml" "org"
                                       "perl" "ruby" "scheme" "sqlite"
                                       "cpp" "cmake" "swift" "cuda" "llvm" "td" "ptx" "yaml"
                                       )))
                 (list (ido-completing-read "Source code type: " src-code-types))))

  (let* (type)
    (setq type src-code-type)
    (when (string= type "cpp")
      (setq type "C++"))
    (when (string= type "td")
      (setq type "tablegen")
      )
    (progn (newline-and-indent)
         (insert (format "#+BEGIN_SRC %s\n" type))
         (newline-and-indent)
         (insert "#+END_SRC\n")
         (previous-line 2)
         (org-edit-src-code))))
#+END_SRC

#+RESULTS:
: org-insert-src-block

*** Set keybinding

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook '(lambda ()
                            ;; keybiding for insert source code
                            (local-set-key (kbd "C-c s") 'org-insert-src-block)))
#+END_SRC

#+RESULTS:
| (lambda nil (local-set-key (kbd C-c s) 'org-insert-src-block)) | (lambda nil (font-lock-add-keywords nil '((next-color-link (0 'org-link t))) t)) | chun/--org-download-override-image-dir-by-file-id | org-download-enable | org-indent-mode | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | er/add-org-mode-expansions | +lookup--init-org-mode-handlers-h | (closure ((hook . org-mode-hook) (--dolist-tail--) t) (&rest _) (add-hook 'before-save-hook 'org-encrypt-entries nil t)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | doom-disable-show-paren-mode-h | doom-disable-show-trailing-whitespace-h | +org-enable-auto-reformat-tables-h | +org-enable-auto-update-cookies-h | +org-make-last-point-visible-h | org-fancy-priorities-mode | org-superstar-mode | evil-org-mode | toc-org-enable | embrace-org-mode-hook | org-eldoc-load |

*** enable execution of several languages

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages '((C . t)
                                                         (python . t)
                                                         (latex . t)
                                                         (dot . t)
                                                         ;;(jupyter . t)
                                                         ))
#+END_SRC

#+RESULTS:


#+BEGIN_SRC emacs-lisp
;;(setq ob-async-no-async-languages-alist '("python" "jupyter-python"))
#+END_SRC

#+RESULTS:
| python | jupyter-python |

** COMMENT Copy the section and open it as a html page
https://orgmode.org/worg/dev/org-element-api.html


#+BEGIN_SRC emacs-lisp
(defun chun/org-html-this ()
    (interactive)
    (let*
        ((cur-tree (org-element-at-point))
         (tmp-org-file (format "/tmp/%d.org" (random "")))
         )
      (message "cur-tree: %S" cur-tree)
      ))
#+END_SRC

#+RESULTS:
: chun/org-html-this








* Configs and commands
** Treat ~_~ as part of word

#+BEGIN_SRC emacs-lisp
(defun chun/--treat-_-as-word ()
  "Treat '_' as part of word."
  (modify-syntax-entry ?_ "w"))

(add-hook! markdown-mode-hook 'chun/--treat-_-as-word)
(add-hook! graphviz-mode-hook 'chun/--treat-_-as-word)
(add-hook! emacs-lisp-mode-hook 'chun/--treat-_-as-word)
(add-hook! c++-mode-hook 'chun/--treat-_-as-word)
#+END_SRC

#+RESULTS:


* anki related
** some template

#+BEGIN_SRC emacs-lisp
(setq chun/--anki-deck-candidates
      '(
        "English-learn-org"
        "gpu-related"))

(setq chun/--anki-card-kinds
      '(
        "Basic (and reversed card)"
        "Basic (optional reversed card)"
        ))

(defun chun/anki-sentence-template (deck card)
  (interactive (list
                (helm :sources (helm-build-sync-source "anki-deck"
                                 :candidates chun/--anki-deck-candidates
                                 :fuzzy-match t)
                      :buffer "*anki deck*")
                (helm :sources (helm-build-sync-source "anki-card"
                                 :candidates chun/--anki-card-kinds
                                 :fuzzy-match t)
                      :buffer "*anki card*")))
  (let* ((input (read-string "Input:")))
    (insert (format "* %s :sentence:
:PROPERTIES:
:ANKI_NOTE_TYPE: %s
:ANKI_DECK: %s
:END:

,** Front
%s
,** Back
" input card deck input))))
#+END_SRC

#+RESULTS:
: chun/anki-sentence-template


* Third-party modes

** PTX mode

#+BEGIN_SRC emacs-lisp
;; ptx-mode.el --- -*- lexical-binding: t; -*-

;; Copyright (C) Sergey Vinokurov
;;
;; Author: Sergey Vinokurov <serg.foo@gmail.com>
;; Created: 23 August 2018
;; Description:
;;
;; This file is not part of GNU Emacs.
;;
;; This is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.
;;
;; This is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.
;;
;; Commentary:
;; This mode is based on PTX extension for Atom https://github.com/H4E/language-ptx.
;;
;; Quick setup:
;; (add-to-list 'auto-mode-alist '("\\.ptx\\'" . ptx-mode))

(eval-when-compile (require 'cl-lib))

(defmacro ptx-mode--rxx (definitions &rest main-expr)
  "Return `rx' invokation of main-expr that has symbols defined in
DEFINITIONS substituted by definition body. DEFINITIONS is list
of let-bindig forms, (<symbol> <body>). No recursion is permitted -
no defined symbol should show up in body of its definition or in
body of any futher definition."
  (declare (indent 1))
  (let ((def (cl-find-if (lambda (def) (not (= 2 (length def)))) definitions)))
    (when def
      (error "ptx-mode--rxx: every definition should consist of two elements: (name def), offending definition: %s"
             def)))
  `(rx ,@(cl-reduce (lambda (def expr)
                      (cl-subst (cadr def) (car def) expr
                                :test #'eq))
                    definitions
                    :initial-value main-expr
                    :from-end t)))

(defvar ptx-mode-syntax-table
  (let ((tbl (make-syntax-table)))
    (modify-syntax-entry ?/  ". 12" tbl)
    (modify-syntax-entry ?\n ">"    tbl)

    (modify-syntax-entry ?\. "."    tbl)
    (modify-syntax-entry ?\_ "w"    tbl)

    (modify-syntax-entry ?\s "-"    tbl)

    (modify-syntax-entry ?\( "()  " tbl)
    (modify-syntax-entry ?\) ")(  " tbl)
    (modify-syntax-entry ?\{ "(}  " tbl)
    (modify-syntax-entry ?\} "){  " tbl)
    (modify-syntax-entry ?\[ "(]  " tbl)
    (modify-syntax-entry ?\] ")[  " tbl)

    tbl)
  "Syntax table in use in happy-mode buffers.")

(defvar ptx-mode-font-lock-keywords
  `((,(ptx-mode--rxx
          ((hex-num (any (?0 . ?9) (?a . ?f) (?A . ?F))))
        (or (seq (? (any ?\+ ?\-))
                 bow
                 (+ (any (?0 . ?9)))
                 (? "."
                    (* (any (?0 . ?9)))))
            (seq "."
                 (* (any (?0 . ?9))))
            (seq bow
                 (or (seq "0"
                          (or (seq (any ?x ?X)
                                   (+ hex-num))
                              (seq (any ?o ?O)
                                   (+ (any (?0 . ?7))))
                              (seq (any ?b ?B)
                                   (+ (any (?0 . ?1))))
                              ))
                     (seq (any (?1 . ?9))
                          (* (any (?0 . ?9)))))
                 (? "U"))
            (seq bow
                 "0"
                 (or (seq (any ?f ?F)
                          (repeat 8 hex-num))
                     (seq (any ?d ?D)
                          (repeat 16 hex-num)))))
        eow)
     (0 'font-lock-constant-face))

    (,(rx bow
          (or
           "WARP_SZ"
           (seq "%"
                (or "clock"
                    "clock64"
                    "ctaid"
                    "gridid"
                    "laneid"
                    "nctaid"
                    "nsmid"
                    "ntid"
                    "nwarpid"
                    "smid"
                    "tid"
                    "warpid"))
           (seq "%lanemask_"
                (or "eq" "ge" "gt" "le" "lt"))
           (seq "%envreg<"
                (or (seq (any (?1 . ?2))
                         (any (?0 . ?9)))
                    (seq "3"
                         (any (?0 . ?1)))
                    (any (?0 . ?9)))
                ">")
           (seq "pm"
                (any (?0 . ?7))))
          eow)
     (0 'font-lock-builtin-face))

    (,(rx bol
          (* (syntax whitespace))
          (or "$"
              "%"
              (or (syntax word)
                  (syntax symbol)))
          (* (or "$"
                 (syntax word)
                 (syntax symbol)))
          ":")
     (0 'font-lock-preprocessor-face))

    (,(rx "."
          (or (seq (any ?u ?f ?b ?s)
                   (or "2"
                       "4"
                       "8"
                       "16"
                       "32"
                       "64"))
              "f16x2"
              "pred"
              (seq "v"
                   (any ?2 ?4))))
     (0 'font-lock-type-face))

    (,(ptx-mode--rxx
          ((memory-space (or ".const"
                             ".global"
                             ".local"
                             ".param"
                             ".shared")))
        bow
        (or (seq (or "ld"
                     "st")
                 (? "."
                    (or "weak"
                        "volatile"
                        "relaxed.scope"
                        "acquire.scope"))
                 (? memory-space)
                 (? "."
                    (or "ca"
                        "cg"
                        "cs"
                        "lu"
                        "cv")))
            (seq "prefetch"
                 (? (or ".global"
                        ".local"))
                 (or ".L1" ".L2"))
            "prefetchu.L1"
            (seq (or "set"
                     "setp")
                 "."
                 (or "eq"
                     "ne"
                     "lt"
                     "gt"
                     "ge"
                     "lo"
                     "ls"
                     "hi"
                     "hs"
                     "equ"
                     "neu"
                     "ltu"
                     "leu"
                     "gtu"
                     "geu"
                     "num"
                     "nan")
                 (? "."
                    (or "and"
                        "or"
                        "xor"))
                 (? ".ftz"))
            (seq (or (seq "cvta"
                          (? ".to"))
                     "isspacep")
                 memory-space)
            (seq "shf"
                 (? (or ".l"
                        ".r"))
                 (? (or ".clamp"
                        ".wrap")))
            (seq "shfl"
                 (? ".sync")
                 (or ".up" ".down" ".bfly" ".idx"))
            (seq (or (or "abs"
                         "add"
                         "addc"
                         "and"
                         "atom"
                         "bar"
                         "bfe"
                         "bfi"
                         "bfind"
                         "bra"
                         "brev"
                         "brkpt"
                         "call"
                         "clz"
                         "cnot"
                         "copysign"
                         "cos"
                         "cvt"
                         "div"
                         "ex2"
                         "exit"
                         "fma"
                         "ldu"
                         "lg2"
                         "mad"
                         "madc"
                         "max"
                         "membar"
                         "min"
                         "mov"
                         "mul"
                         "neg"
                         "not"
                         "or"
                         "pmevent"
                         "popc"
                         "prmt"
                         "rcp"
                         "red"
                         "rem"
                         "ret"
                         "rsqrt"
                         "sad"
                         "selp"
                         "shl"
                         "shr"
                         "sin"
                         "slct"
                         "sqrt"
                         "sub"
                         "subc"
                         "suld"
                         "suq"
                         "sured"
                         "sust"
                         "testp"
                         "tex"
                         "tld4"
                         "trap"
                         "txq"
                         "vabsdiff"
                         "vmad"
                         "vmax"
                         "vmin"
                         "vote"
                         "vset"
                         "vshl"
                         "vshr"
                         "vsub"
                         "xor")
                     (seq (or "vavrg"
                              "vmax"
                              "vmin"
                              "mad"
                              "vset"
                              "vsub"
                              "mul"
                              "vabsdiff"
                              "vadd")
                          "24"))
                 (? (or ".lo"
                        ".hi"
                        ".wide"))))
        eow)
     (0 'font-lock-keyword-face))

    (,(rx "."
          (or "address_size"
              "align"
              "branchtarget"
              "branchtargets"
              "callprototype"
              "calltargets"
              "const"
              "entry"
              "extern"
              "file"
              "func"
              "global"
              "loc"
              "local"
              "maxnctapersm"
              "maxnreg"
              "maxntid"
              "minnctapersm"
              "param"
              "pragma"
              "reg"
              "reqntid"
              "section"
              "shared"
              "sreg"
              "target"
              "tex"
              "version"
              "visible"
              "weak"))
     (0 'font-lock-builtin-face))

    ;; Special directives
    (,(rx "."
          (or "attribute"
              "managed"
              "ptr"
              "relaxed"
              "sys"

              "approx"
              "ftz"
              "rnd"
              "sat"))
     (0 'font-lock-builtin-face))

    ;; Rounding modes
    (,(rx "."
          (or "rn"
              "rz"
              "rm"
              "rp")
          (? "i"))
     (0 'font-lock-negation-char-face))

    (,(rx (seq ".entry"
               (* (syntax whitespace))
               (group
                (+ (syntax word)))
               (* (syntax whitespace))
               "("))
     (1 'font-lock-function-name-face))

    ;; Registers
    (,(rx "%"
          (+ (or (syntax word)
                 (syntax symbol)
                 (any (?0 . ?9))))
          ;; (? "<"
          ;;    (+ (any (?0 . ?9)))
          ;;    ">")
          )
     (0 'font-lock-variable-name-face))

    ;; Operators
    (,(rx (or "+"
              "-"
              "!"
              "~"
              "*"
              "/"
              "%"
              "<<"
              ">>"
              "<"
              "<="
              ">"
              ">="
              "=="
              "!="
              "&"
              "^"
              "|"
              "&&"
              "||"
              "?:")
          )
     (0 'font-lock-variable-name-face)))
  "Highlight definitions of PTX constructs for font-lock.")

;;;###autoload
(define-derived-mode ptx-mode prog-mode "PTX"
  "Major mode for editing PTX files."
  (set (make-local-variable 'font-lock-defaults)
       '(ptx-mode-font-lock-keywords
         nil ;; perform syntactic fontification
         nil ;; do not ignore case
         nil ;; no special syntax provided
         ))

  (setq-local require-final-newline t)
  (setq-local comment-start "//")
  (setq-local comment-end "")
  (setq-local comment-column 32)
  (setq-local comment-start-skip "//+ *")
  (setq-local parse-sexp-ignore-comments t)
  (make-local-variable 'block-indent-level)
  (make-local-variable 'auto-fill-hook))

(provide 'ptx-mode)

;; Local Variables:
;; End:

;; ptx-mode.el ends here
#+END_SRC

#+RESULTS:
: ptx-mode
